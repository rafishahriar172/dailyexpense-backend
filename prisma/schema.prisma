// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

enum TransactionType {
  EXPENSE
  INCOME
  TRANSFER
}

enum TransactionCategory {
  // Expense Categories
  FOOD_DINING
  TRANSPORTATION
  SHOPPING
  ENTERTAINMENT
  BILLS_UTILITIES
  HEALTHCARE
  EDUCATION
  TRAVEL
  BUSINESS
  PERSONAL_CARE
  HOME_GARDEN
  GIFTS_DONATIONS
  INVESTMENTS
  TAXES
  OTHER_EXPENSE
  
  // Income Categories
  SALARY
  FREELANCE
  BUSINESS_INCOME
  INVESTMENT_RETURNS
  RENTAL_INCOME
  GIFTS_RECEIVED
  REFUNDS
  OTHER_INCOME
  
  // Transfer Categories
  SAVINGS_TRANSFER
  ACCOUNT_TRANSFER
  LOAN_PAYMENT
  CREDIT_PAYMENT
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  CASH
  DIGITAL_WALLET
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model User {
  id                String    @id @default(uuid()) @db.Uuid
  email             String    @unique
  username          String?   @unique
  firstName         String?
  lastName          String?
  profileImage      String?
  passwordHash      String?
  
  // Google OAuth fields
  googleId          String?   @unique
  isEmailVerified   Boolean   @default(false)
  
  // Security fields
  status            UserStatus @default(ACTIVE)
  lastLoginAt       DateTime?
  loginAttempts     Int       @default(0)
  lockedUntil       DateTime?
  refreshToken      String?
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  accounts          Account[]
  transactions      Transaction[]
  budgets           Budget[]
  categories        CustomCategory[]
  sessions          UserSession[]
  
  @@map("users")
}

model UserSession {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  deviceInfo  String?
  ipAddress   String?
  userAgent   String?
  isActive    Boolean  @default(true)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
}

model Account {
  id              String      @id @default(uuid()) @db.Uuid
  userId          String      @db.Uuid
  name            String
  type            AccountType
  balance         Decimal     @default(0) @db.Decimal(12, 2)
  currency        String      @default("USD")
  isActive        Boolean     @default(true)
  description     String?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    Transaction[]
  transfersFrom   Transfer[]  @relation("FromAccount")
  transfersTo     Transfer[]  @relation("ToAccount")
  
  @@map("accounts")
}

model Transaction {
  id            String              @id @default(uuid()) @db.Uuid
  userId        String              @db.Uuid
  accountId     String              @db.Uuid
  type          TransactionType
  category      TransactionCategory
  amount        Decimal             @db.Decimal(12, 2)
  description   String?
  notes         String?
  tags          String[]
  
  // Date fields
  transactionDate DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  account       Account             @relation(fields: [accountId], references: [id], onDelete: Cascade)
  transfer      Transfer?
  
  @@map("transactions")
}

model Transfer {
  id              String      @id @default(uuid()) @db.Uuid
  transactionId   String      @unique @db.Uuid
  fromAccountId   String      @db.Uuid
  toAccountId     String      @db.Uuid
  exchangeRate    Decimal?    @db.Decimal(10, 6)
  fees            Decimal?    @db.Decimal(10, 2)
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  fromAccount     Account     @relation("FromAccount", fields: [fromAccountId], references: [id])
  toAccount       Account     @relation("ToAccount", fields: [toAccountId], references: [id])
  
  @@map("transfers")
}

model CustomCategory {
  id          String              @id @default(uuid()) @db.Uuid
  userId      String              @db.Uuid
  name        String
  type        TransactionType
  color       String?
  icon        String?
  isActive    Boolean             @default(true)
  
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  // Relations
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, name])
  @@map("custom_categories")
}

model Budget {
  id          String              @id @default(uuid()) @db.Uuid
  userId      String              @db.Uuid
  name        String
  category    TransactionCategory
  amount      Decimal             @db.Decimal(12, 2)
  spent       Decimal             @default(0) @db.Decimal(12, 2)
  period      String              // "monthly", "weekly", "yearly"
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean             @default(true)
  
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  // Relations
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("budgets")
}

model AuditLog {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String?   @db.Uuid
  action      String
  entity      String
  entityId    String?
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  
  createdAt   DateTime  @default(now())
  
  @@map("audit_logs")
}
